# -*- coding: utf-8 -*-# !/usr/bin/python# @Author: WX# @Create Time: 2020/4/21# @Software: PyCharmfrom google.protobuf import json_formatfrom pb_files.common_msg_def_pb2 import *from pb_files.quote_msg_def_pb2 import *from pb_files.quote_type_def_pb2 import *from test_config import *from websocket_py3.ws_base.ws_client import *from common.common_method import Commonfrom py_sqlite.market import MarketSqliteDBClientfrom common.test_log.ed_log import get_logimport jsonclass SubscribeApi(object):    def __init__(self, ws_url, new_loop, is_record=False):        self.new_loop = new_loop        self.client = BaseWebSocketClient(url=ws_url, loop=self.new_loop)        self.common = Common()        self.sq = MarketSqliteDBClient(is_subscribe_record=is_record)        self.logger = get_log()    # 登录请求    async def LoginReq(self, token, start_time_stamp=None, frequence=None):        data_send = LoginReq(auto_token=token, start_time_stamp=start_time_stamp, frequence=frequence)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.LOGIN_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg)        json_login_list = []        for req in all_req:            recv_data = QuoteMsgCarrier()            recv_data.ParseFromString(req)            if recv_data.type == QuoteMsgType.LOGIN_RSP:                login_data = LoginRsp()                login_data.ParseFromString(recv_data.data)                json_login_data = json_format.MessageToJson(login_data)                json_login_data = json.loads(json_login_data)                json_login_list.append(json_login_data)        self.logger.debug('LoginReq json_login_list:{}'.format(json_login_list))        return json_login_list    # 登出请求    async def LogoutReq(self, start_time_stamp=None, recv_num=1):        data_send = LogoutReq(start_time_stamp=start_time_stamp)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.LOGOUT_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)        json_logout_list = []        for req in all_req:            recv_data = QuoteMsgCarrier()            recv_data.ParseFromString(req)            if recv_data.type == QuoteMsgType.LOGOUT_RSP:                login_data = LogoutRsp()                login_data.ParseFromString(recv_data.data)                json_logout_data = json_format.MessageToJson(login_data)                json_logout_data = json.loads(json_logout_data)                json_logout_list.append(json_logout_data)        self.logger.debug('LogoutReq json_logout_list:{}'.format(json_logout_list))        return json_logout_list    # 心跳    async def HearbeatReqApi(self, connid, isKeep=False):        data_send = HeartReqMsg(conn_id=connid)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.HEARTBEAT_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        if isKeep == False:            all_req = await self.client.send_and_recv(quote_msg)            json_rsp_list = []            for base_req in all_req:                if base_req == None:                    continue                rev_data = QuoteMsgCarrier()                rev_data.ParseFromString(base_req)                if rev_data.type == QuoteMsgType.HEARTBEAT_RSP:                    single_data = HeartRspMsg()                    single_data.ParseFromString(rev_data.data)                    json_single_data = json_format.MessageToJson(single_data)                    json_single_data = json.loads(json_single_data)                    json_rsp_list.append(json_single_data)            self.logger.debug('HearbeatReqApi json_rsp_list:{}'.format(json_rsp_list))            return json_rsp_list        else:            await self.client.send(quote_msg)    # 保持心跳    async def hearbeat_job(self, gap_time=20):        i = 1        asyncio.set_event_loop(self.new_loop)        while True:            if self.client.is_disconnect():                break            await self.HearbeatReqApi(connid=i, isKeep=True)            self.logger.debug('The {} time to keep heartbeat! SendTimeStamp:{}'.format(i, str(time.time())))            await asyncio.sleep(gap_time)            i = i + 1    # 测速    async def VelocityReqApi(self, start_time=None):        data_send = VelocityReqMsg(start_time=start_time)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.VELOCITY_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg)        json_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.VELOCITY_RSP:                single_data = VelocityRspMsg()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)        self.logger.debug('VelocityReqApi json_rsp_list:{}'.format(json_rsp_list))        return json_rsp_list    # 实时订阅    async def SubsQutoMsgReqApi(self, sub_type=None, child_type=None, base_info=None, recv_num=1, start_time_stamp=None, is_delay=False):        '''        Return:        {            'first_rsp_list': [{}, {}, {}],  # 表示订阅应答响应 SUBSCRIBE_RSP            'snapshot_json_list': [{}, {}, {}, {}, {}],  # 表示返回的当前时间之前的合约快照数据            'basic_json_list': [{}, {}, {}, {}, {}]  # 表示返回的当前时间之前的合约静态数据            'orderbook_json_list': [{}, {}, {}, {}, {}]  # 表示返回的当前时间之前的合约盘口数据        }        '''        self.logger.debug('''sub_type:{}, child_type:{}, base_info:{}'''.format(sub_type, child_type, base_info))        send_data = SubscribeQuoteMsgReq(sub_type=sub_type, child_type=child_type, base_info=base_info, start_time_stamp=start_time_stamp)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.SUBSCRIBE_REQ, data=send_data.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)        first_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.SUBSCRIBE_RSP:                single_data = SubscribeQuoteMsgRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                first_rsp_list.append(json_single_data)            elif rev_data.type == QuoteMsgType.HEARTBEAT_RSP:  # 如果接到心跳数据应忽略,继续接受一次                all_req = await self.client.recv(recv_num=1)                for base_req in all_req:                    rev_data = QuoteMsgCarrier()                    rev_data.ParseFromString(base_req)                    if rev_data.type == QuoteMsgType.SUBSCRIBE_RSP:                        single_data = SubscribeQuoteMsgRsp()                        single_data.ParseFromString(rev_data.data)                        json_single_data = json_format.MessageToJson(single_data)                        json_single_data = json.loads(json_single_data)                        first_rsp_list.append(json_single_data)        self.logger.debug('SubsQutoMsgReqApi first_rsp_list:{}'.format(first_rsp_list))        finally_rsp = {}        finally_rsp['first_rsp_list'] = first_rsp_list        before_snapshot_json_list = []        before_basic_json_list = []        before_orderbook_json_list = []        # 接收该合约前一刻的最新一笔静态、快照，直到更新时间超出请求时间则跳出        while True:            before_time_reqs = await self.client.recv(recv_num=1)            if before_time_reqs != []:                base_req = before_time_reqs[0]                rev_data = QuoteMsgCarrier()                rev_data.ParseFromString(base_req)                if rev_data.type == QuoteMsgType.PUSH_SNAPSHOT:                    single_data = QuoteSnapshot()                    single_data.ParseFromString(rev_data.data)                    json_snapshot_data = json_format.MessageToJson(single_data)                    json_snapshot_data = json.loads(json_snapshot_data)                    req_source_time = self.common.searchDicKV(json_snapshot_data, 'sourceUpdateTime')                    instr_code = self.common.searchDicKV(json_snapshot_data, 'instrCode')                    exchange = self.common.searchDicKV(json_snapshot_data, 'exchange')                    if self.common.isDataBeforeSubscribe(exchange, is_delay, req_source_time, start_time_stamp,                                                         tolerance_time):                        # self.logger.debug('before_json_snapshot_data:{}'.format(json_snapshot_data))                        before_snapshot_json_list.append(json_snapshot_data)                        self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, json_snapshot_data)                    else:                        break                elif rev_data.type == QuoteMsgType.PUSH_BASIC:                    single_data = QuoteBasicInfo()                    single_data.ParseFromString(rev_data.data)                    basic_single_data = json_format.MessageToJson(single_data)                    basic_single_data = json.loads(basic_single_data)                    req_source_time = self.common.searchDicKV(basic_single_data, 'updateTimestamp')                    instr_code = self.common.searchDicKV(basic_single_data, 'instrCode')                    exchange = self.common.searchDicKV(basic_single_data, 'exchange')                    # 毫秒级别对比                    if self.common.isDataBeforeSubscribe(exchange, is_delay, req_source_time, start_time_stamp,                                                         tolerance_time):                        # self.logger.debug('before_basic_single_data:{}'.format(basic_single_data))                        before_basic_json_list.append(basic_single_data)                        self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, basic_single_data)                    else:                        break                elif rev_data.type == QuoteMsgType.PUSH_ORDER_BOOK:                    single_data = QuoteOrderBookData()                    single_data.ParseFromString(rev_data.data)                    basic_single_data = json_format.MessageToJson(single_data)                    basic_single_data = json.loads(basic_single_data)                    req_source_time = self.common.searchDicKV(basic_single_data, 'sourceUpdateTime')                    instr_code = self.common.searchDicKV(basic_single_data, 'instrCode')                    exchange = self.common.searchDicKV(basic_single_data, 'exchange')                    # 毫秒级别对比                    if self.common.isDataBeforeSubscribe(exchange, is_delay, req_source_time, start_time_stamp,                                                         tolerance_time):                        # self.logger.debug('before_basic_single_data:{}'.format(basic_single_data))                        before_orderbook_json_list.append(basic_single_data)                        self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, basic_single_data)                    else:                        break                elif rev_data.type not in [QuoteMsgType.PUSH_SNAPSHOT, QuoteMsgType.PUSH_BASIC, QuoteMsgType.PUSH_ORDER_BOOK, QuoteMsgType.HEARTBEAT_RSP, QuoteMsgType.SUBSCRIBE_RSP]:                    break                else:                    pass            else:                break        finally_rsp['before_snapshot_json_list'] = before_snapshot_json_list        finally_rsp['before_basic_json_list'] = before_basic_json_list        finally_rsp['before_orderbook_json_list'] = before_orderbook_json_list        self.logger.debug('SubsQutoMsgReqApi finally_rsp:{}'.format(finally_rsp))        return finally_rsp    # 延时订阅    async def DelaySubsQutoMsgReqApi(self, sub_type=None, child_type=None, base_info=None, recv_num=1,                                start_time_stamp=None):        is_delay = True        return await self.SubsQutoMsgReqApi(sub_type=sub_type, child_type=child_type, base_info=base_info, recv_num=recv_num,                                start_time_stamp=start_time_stamp, is_delay=is_delay)    # 取消行情订阅    async def UnSubsQutoMsgReqApi(self, unsub_type, unchild_type=None, unbase_info=None, recv_num=20, start_time_stamp=None):        self.logger.debug('''sub_type:{}, child_type:{}, base_info:{}'''.format(unsub_type, unchild_type, unbase_info))        send_data = UnsubscribeQuoteMsgReq(sub_type=unsub_type, child_type=unchild_type, base_info=unbase_info,                                         start_time_stamp=start_time_stamp)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.UNSUBSCRIBE_REQ, data=send_data.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)        json_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.UNSUBSCRIBE_RSP:                single_data = UnsubscribeQuoteMsgRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)        self.logger.debug('UnSubsQutoMsgReqApi json_rsp_list:{}'.format(json_rsp_list))        return json_rsp_list    # app订阅分时数据    async def SubscribeKlineMinReqApi(self, exchange, code, start_time_stamp, recv_num=5):        self.logger.debug('exchange:{}, code:{}, start_time_stamp:{}'.format(exchange, code, start_time_stamp))        data_send = SubscribeKlineMinReq(exchange=exchange, code=code, start_time_stamp=start_time_stamp)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.SUBSCRIBE_KLINE_MIN_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)        rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.SUBSCRIBE_KLINE_MIN_RSP:                single_data = SubscribeKlineMinRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                rsp_list.append(json_single_data)        self.logger.debug('SubscribeKlineMinReqApi rsp_list:{}'.format(rsp_list))        return rsp_list    # app取消订阅分时数据    async def UnsubscribeKlineMinReqApi(self, exchange, code, start_time_stamp, recv_num=5):        self.logger.debug('exchange:{}, code:{}, start_time_stamp:{}'.format(exchange, code, start_time_stamp))        data_send = UnsubscribeKlineMinReq(exchange=exchange, code=code, start_time_stamp=start_time_stamp)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.UNSUBSCRIBE_KLINE_MIN_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)        rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.UNSUBSCRIBE_KLINE_MIN_RSP:                single_data = UnsubscribeKlineMinRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                rsp_list.append(json_single_data)        self.logger.debug('UnsubscribeKlineMinReqApi rsp_list:{}'.format(rsp_list))        return rsp_list    # app订阅K线数据    async def SubscribeKLineMsgReqApi(self, peroid_type, base_info, start_time_stamp, recv_num=2):        '''        message SubscribeKLineMsgReq        {            KLinePeriodType                    peroid_type = 1;       // 频率            repeated SubscribeInstrBaseInfo    base_info  = 2;        // 合约信息            uint64                            start_time_stamp = 3;   // 发起请求的时间戳 UTC时间戳        }        message SubscribeInstrBaseInfo        {            common.ExchangeType exchange     = 1;           // 交易所            string              code         = 2;           // 合约代码            string              product_code = 3;           // 品种代码        }        '''        self.logger.debug('peroid_type: {},base_info: {},start_time_stamp: {}'.format(peroid_type, base_info, start_time_stamp))        data_send = SubscribeKLineMsgReq(peroid_type=peroid_type, base_info=base_info, start_time_stamp=start_time_stamp)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.SUBSCRIBE_KLINE_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)        final_rsp = {}        sub_kline_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.SUBSCRIBE_KLINE_RSP:                single_data = SubscribeKLineMsgRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                sub_kline_rsp_list.append(json_single_data)        self.logger.debug('SubscribeKLineMsgReqApi sub_kline_rsp_list:{}'.format(sub_kline_rsp_list))        return sub_kline_rsp_list    # app取消订阅K线数据    async def UnsubscribeKLineMsgReqApi(self, peroid_type, base_info, start_time_stamp, recv_num=20):        self.logger.debug(            'peroid_type: {},base_info: {},start_time_stamp: {}'.format(peroid_type, base_info, start_time_stamp))        data_send = SubscribeKLineMsgReq(peroid_type=peroid_type, base_info=base_info,                                         start_time_stamp=start_time_stamp)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.UNSUBSCRIBE_KLINE_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)        final_rsp = {}        sub_kline_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.UNSUBSCRIBE_KLINE_RSP:                single_data = UnSubscribeKLineMsgRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                sub_kline_rsp_list.append(json_single_data)        self.logger.debug('UnsubscribeKLineMsgReqApi :{}'.format(sub_kline_rsp_list))        return sub_kline_rsp_list    # app订阅逐笔成交    async def SubscribeTradeTickReqApi(self, exchange, code, start_time_stamp, recv_num=20):        self.logger.debug('exchange:{}, code:{}, start_time_stamp:{}'.format(exchange, code, start_time_stamp))        data_send = SubscribeTradeTickReq(exchange=exchange, code=code, start_time_stamp=start_time_stamp)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.SUBSCRIBE_TRADE_TICK_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)        rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.SUBSCRIBE_TRADE_TICK_RSP:                single_data = SubscribeTradeTickRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                rsp_list.append(json_single_data)        self.logger.debug('SubscribeTradeTickReqApi rsp_list:{}'.format(rsp_list))        return rsp_list    # app取消订阅逐笔成交    async def UnsubscribeTradeTickReqApi(self, exchange, code, start_time_stamp, recv_num=50):        self.logger.debug('exchange:{}, code:{}, start_time_stamp:{}'.format(exchange, code, start_time_stamp))        data_send = UnsubscribeTradeTickReq(exchange=exchange, code=code, start_time_stamp=start_time_stamp)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.UNSUBSCRIBE_TRADE_TICK_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)        rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.UNSUBSCRIBE_TRADE_TICK_RSP:                single_data = UnsubscribeTradeTickRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                rsp_list.append(json_single_data)        self.logger.debug('UnsubscribeTradeTickReqApi rsp_list:{}'.format(rsp_list))        return rsp_list    # 推送行情静态数据    async def QuoteBasicInfoApi(self, recv_num=10):        all_req = await self.client.recv(recv_num)        json_basic_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.PUSH_BASIC:                basic_data = QuoteBasicInfo()                basic_data.ParseFromString(rev_data.data)                json_basic_data = json_format.MessageToJson(basic_data)                json_basic_data = json.loads(json_basic_data)                json_basic_list.append(json_basic_data)                req_source_time = self.common.searchDicKV(json_basic_data, 'sourceUpdateTime')                instr_code = self.common.searchDicKV(json_basic_data, 'instrCode')                self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, json_basic_data)        self.logger.debug('QuoteBasicInfoApi json_rsp_list:{}'.format(json_basic_list))        return json_basic_list    # 推送行情快照数据    async def QuoteSnapshotApi(self, recv_num=10, recv_timeout_sec=10):        all_req = await self.client.recv(recv_num, recv_timeout_sec=recv_timeout_sec)        json_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.PUSH_SNAPSHOT:                basic_data = QuoteSnapshot()                basic_data.ParseFromString(rev_data.data)                json_basic_data = json_format.MessageToJson(basic_data)                json_basic_data = json.loads(json_basic_data)                json_rsp_list.append(json_basic_data)                req_source_time = self.common.searchDicKV(json_basic_data, 'sourceUpdateTime')                instr_code = self.common.searchDicKV(json_basic_data, 'instrCode')                self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, json_basic_data)        self.logger.debug('QuoteSnapshotApi json_rsp_list:{}'.format(json_rsp_list))        return json_rsp_list    # 推送行情盘口数据    async def QuoteOrderBookDataApi(self, recv_num=10, recv_timeout_sec=10):        all_req = await self.client.recv(recv_num, recv_timeout_sec=recv_timeout_sec)        json_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.PUSH_ORDER_BOOK:                single_data = QuoteOrderBookData()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)                req_source_time = self.common.searchDicKV(json_single_data, 'sourceUpdateTime')                instr_code = self.common.searchDicKV(json_single_data, 'instrCode')                self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, json_single_data)        self.logger.debug('QuoteOrderBookDataApi json_rsp_list:{}'.format(json_rsp_list))        return json_rsp_list    # 推送行情逐笔数据    async def QuoteTradeDataApi(self, recv_num=10, recv_timeout_sec=10):        all_req = await self.client.recv(recv_num, recv_timeout_sec=recv_timeout_sec)        json_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.PUSH_TRADE_DATA:                single_data = QuoteTradeData()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)                req_source_time = self.common.searchDicKV(json_single_data, 'sourceUpdateTime')                instr_code = self.common.searchDicKV(json_single_data, 'instrCode')                self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, json_single_data)        self.logger.debug('QuoteTradeDataApi json_rsp_list:{}'.format(json_rsp_list))        return json_rsp_list    # 推送分时数据    async def PushKLineMinDataApi(self, recv_num=10):        all_req = await self.client.recv(recv_num)        json_basic_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.PUSH_KLINE_MIN:                single_data = PushKLineMinData()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_basic_list.append(json_single_data)                req_source_time = self.common.searchDicKV(json_single_data, 'sourceUpdateTime')                instr_code = self.common.searchDicKV(json_single_data, 'code')                self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, json_single_data)        self.logger.debug('PushKLineMinDataApi json_rsp_list:{}'.format(json_basic_list))        return json_basic_list    # 推送K线数据    async def PushKLineDataApi(self, recv_num=10):        all_req = await self.client.recv(recv_num)        json_kline_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.PUSH_KLINE:                single_data = PushKLineData()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_kline_list.append(json_single_data)                updateDateTime = self.common.searchDicKV(json_single_data, 'updateDateTime')                req_source_time = int(time.mktime(time.strptime(updateDateTime, "%Y%m%d%H%M%S"))) * 1000                instr_code = self.common.searchDicKV(json_single_data, 'code')                self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, json_single_data)        self.logger.debug('PushKLineDataApi json_rsp_list:{}'.format(json_kline_list))        return json_kline_list    #  推送品种交易状态数据    async def PushTradeStatusDataApi(self, recv_num=10):        all_req = await self.client.recv(recv_num)        json_basic_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.PUSH_TRADE_STATUS:                single_data = TradeStatusData()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_basic_list.append(json_single_data)                time_stamp = self.common.searchDicKV(json_single_data, 'timeStamp')                product_Code = self.common.searchDicKV(json_single_data, 'productCode')                self.sq.subscribe_new_record(rev_data.type, product_Code, time_stamp, json_single_data)        self.logger.debug('PushTradeStatusDataApi json_rsp_list:{}'.format(json_basic_list))        return json_basic_list    # 手机Api---开始请求分时页面数据    async def StartChartDataReqApi(self, exchange, code, start_time_stamp, recv_num=20):        '''        message StartChartDataRsp{    RetResult              ret_result  = 1;    // 返回结果    common.ExchangeType    exchange    = 2;    // 交易所    string                 code        = 3;    // 合约代码    uint64    start_time_stamp = 4;   // 发起请求的时间戳 UTC时间戳    uint64    recv_req_time_stamp =5; // 接收到请求的时间戳    uint64    rsp_time_stamp = 6;     // 发送数据的时间戳    QuoteBasicInfo         basic_data  = 7;   // 静态数据    QuoteSnapshot          snapshot    = 8;   // 快照数据    QuoteOrderBookData     orderbook   = 9;   // 盘口    repeated QuoteTradeData  trade_data  = 10;   // 逐笔成交数据    repeated KlineDataMin    kline_min   = 11;  // 分时数据}        '''        self.logger.debug('''exchange:{}, code:{}, start_time_stamp:{}'''.format(exchange, code, start_time_stamp))        data_send = StartChartDataReq(exchange=exchange, code=code, start_time_stamp=start_time_stamp)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.START_CHART_DATA_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)     # 因历史数据需要时间查询，则响应可能滞后于推送数据，故此处多接受多次因历史数据需要时间查询，则响应可能滞后于推送数据，故此处多接受多次        app_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.START_CHART_DATA_RSP:                single_data = StartChartDataRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                app_rsp_list.append(json_single_data)                self.logger.debug('StartChartDataReqApi app_rsp_list:{}'.format(app_rsp_list))        return app_rsp_list    # 手机Api---结束请求分时页面数据    async def StopChartDataReqApi(self, exchange, code, start_time_stamp, recv_num=100):        self.logger.debug('''exchange:{}, code:{}, start_time_stamp:{}'''.format(exchange, code, start_time_stamp))        data_send = StopChartDataReq(exchange=exchange, code=code, start_time_stamp=start_time_stamp)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.STOP_CHART_DATA_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)        json_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.STOP_CHART_DATA_RSP:                single_data = StopChartDataRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)        self.logger.debug('StopChartDataReqApi json_rsp_list:{}'.format(json_rsp_list))        return json_rsp_list    # 此方法用于接收主推的静态、快照、盘口、逐笔、分时数据、K线，方便测试    async def AppQuoteAllApi(self, recv_num=20):        all_req = await self.client.recv(recv_num)        json_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.PUSH_BASIC:                single_data = QuoteBasicInfo()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)                req_source_time = self.common.searchDicKV(json_single_data, 'updateTimestamp')                instr_code = self.common.searchDicKV(json_single_data, 'instrCode')                self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, json_single_data)            elif rev_data.type == QuoteMsgType.PUSH_SNAPSHOT:                single_data = QuoteSnapshot()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)                req_source_time = self.common.searchDicKV(json_single_data, 'sourceUpdateTime')                instr_code = self.common.searchDicKV(json_single_data, 'instrCode')                self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, json_single_data)            elif rev_data.type == QuoteMsgType.PUSH_ORDER_BOOK:                single_data = QuoteOrderBookData()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)                req_source_time = self.common.searchDicKV(json_single_data, 'sourceUpdateTime')                instr_code = self.common.searchDicKV(json_single_data, 'instrCode')                self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, json_single_data)            elif rev_data.type == QuoteMsgType.PUSH_TRADE_DATA:                single_data = QuoteTradeData()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)                req_source_time = self.common.searchDicKV(json_single_data, 'sourceUpdateTime')                instr_code = self.common.searchDicKV(json_single_data, 'instrCode')                self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, json_single_data)            elif rev_data.type == QuoteMsgType.PUSH_KLINE_MIN:                single_data = PushKLineMinData()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)                req_source_time = self.common.searchDicKV(json_single_data['data'][0], 'updateDateTime')                instr_code = self.common.searchDicKV(json_single_data, 'code')                self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, json_single_data)            elif rev_data.type == QuoteMsgType.PUSH_KLINE:                single_data = PushKLineData()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)                req_source_time = self.common.searchDicKV(json_single_data, 'updateDateTime')                instr_code = self.common.searchDicKV(json_single_data, 'code')                self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, json_single_data)            elif rev_data.type == QuoteMsgType.QUERY_TRADE_STATUS_RSP:                single_data = QueryTradeStatusMsgRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)                req_source_time = self.common.searchDicKV(json_single_data['data'][0], 'timeStamp')                instr_code = 'ALL'                self.sq.subscribe_new_record(rev_data.type, instr_code, req_source_time, json_single_data)            elif rev_data.type == QuoteMsgType.PUSH_TRADE_STATUS:                single_data = TradeStatusData()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)                time_stamp = self.common.searchDicKV(json_single_data, 'timeStamp')                product_code = self.common.searchDicKV(json_single_data, 'productCode')                self.sq.subscribe_new_record(rev_data.type, product_code, time_stamp, json_single_data)        # self.logger.debug('AppQuoteAllApi json_rsp_list:{}'.format(json_rsp_list))        return json_rsp_list    # app查询分时数据    async def QueryKLineMinMsgReqApi(self, isSubKLineMin, exchange, code, query_type, direct, start, end, vol,                                     start_time_stamp, recv_num=5):        # app订阅服务中，该api只会自动返回当天的分时数据，与入参无关        '''        message QueryKLineMinMsgReq        {            bool                  isSubKLineMin = 1;    // 是否订阅KLineMin            common.ExchangeType   exchange      = 2;    // 交易所            string                code          = 3;    // 合约代码            QueryKLineMsgType     type          = 4;    // 获取K线的方式            QueryKLineDirectType  direct        = 5;    // 查询K线的方向            uint64                start         = 6;    // 开始时间            uint64                end           = 7;    // 结束时间            uint64                vol           = 8;    // 按量查询时此字段表示多少根            uint64                start_time_stamp = 9; // 发起请求的时间戳 UTC时间戳        }        '''        self.logger.debug(            'isSubKLineMin:{}, exchange:{}, code:{}, type:{}, direct:{}, start:{}, end:{}, vol:{}, start_time_stamp:{}'.format(                isSubKLineMin, exchange, code, query_type, direct, start, end, vol, start_time_stamp))        data_send = QueryKLineMinMsgReq(isSubKLineMin=isSubKLineMin, exchange=exchange, code=code, type=query_type,                                        direct=direct, start=start, end=end, vol=vol, start_time_stamp=start_time_stamp)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.QUERY_KLINE_MIN_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)        final_rsp = {}        query_kline_min_rsp_list = []        sub_kline_min_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.QUERY_KLINE_MIN_RSP:                single_data = QueryKLineMinMsgRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                query_kline_min_rsp_list.append(json_single_data)            elif rev_data.type == QuoteMsgType.SUBSCRIBE_KLINE_MIN_RSP:                single_data = SubscribeKlineMinRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                sub_kline_min_rsp_list.append(json_single_data)        final_rsp['query_kline_min_rsp_list'] = query_kline_min_rsp_list        final_rsp['sub_kline_min_rsp_list'] = sub_kline_min_rsp_list        self.logger.debug('QueryKLineMinMsgReqApi final_rsp:{}'.format(final_rsp))        return final_rsp    # app查询五日分时数据    async def QueryFiveDaysKLineMinReqApi(self, isSubKLineMin, exchange, code, start, start_time_stamp, recv_num=5):        '''        message QueryFiveDaysKLineMinReq        {            bool                  isSubKLineMin = 1;    // 是否订阅KLineMin            common.ExchangeType   exchange      = 2;    // 交易所            string                code          = 3;    // 合约代码            uint64                start         = 6;    // 开始时间            uint64                start_time_stamp = 9; // 发起请求的时间戳 UTC时间戳        }        '''        self.logger.debug(            'isSubKLineMin:{}, exchange:{}, code:{}, start:{}, start_time_stamp:{}'.format(isSubKLineMin, exchange,                                                                                           code, start,                                                                                           start_time_stamp))        data_send = QueryFiveDaysKLineMinReq(isSubKLineMin=isSubKLineMin, exchange=exchange, code=code, start=start,                                             start_time_stamp=start_time_stamp)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.QUERY_FIVEDAYS_KLINEMIN_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)        final_rsp = {}        query_5day_klinemin_rsp_list = []        sub_kline_min_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.QUERY_FIVEDAYS_KLINEMIN_RSP:                single_data = QueryFiveDaysKLineMinRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                query_5day_klinemin_rsp_list.append(json_single_data)            elif rev_data.type == QuoteMsgType.SUBSCRIBE_KLINE_MIN_RSP:                single_data = SubscribeKlineMinRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                sub_kline_min_rsp_list.append(json_single_data)        final_rsp['query_5day_klinemin_rsp_list'] = query_5day_klinemin_rsp_list        final_rsp['sub_kline_min_rsp_list'] = sub_kline_min_rsp_list        self.logger.debug('QueryFiveDaysKLineMinReqApi final_rsp:{}'.format(final_rsp))        return final_rsp    # app查询K线数据    async def QueryKLineMsgReqApi(self, isSubKLine, exchange, code, peroid_type, query_type, direct, start, end, vol,                                  start_time_stamp, recv_num=5):        '''        message QueryKLineMsgReq        {            bool                  isSubKLine   = 1;    // 查询KLine时是否订阅KLine数据            common.ExchangeType   exchange     = 2;    // 交易所            string                code         = 3;    // 合约代码            KLinePeriodType       peroid_type  = 4;    // 频率            QueryKLineMsgType     type         = 5;    // 获取K线的方式            QueryKLineDirectType  direct       = 6;    // 查询K线的方向            uint64                start        = 7;    // 开始时间            uint64                end          = 8;    // 结束时间            uint64                vol          = 9;    // 此字段表示查询K线的量            uint64                start_time_stamp = 10; // 发起请求的时间戳 UTC时间戳        }        '''        self.logger.debug(            'isSubKLine:{}, exchange:{}, code:{}, peroid_type:{}, query_type:{}, direct:{}, start:{}, end:{}, vol:{}, start_time_stamp:{}'.format(                isSubKLine, exchange, code, peroid_type, query_type, direct, start, end, vol, start_time_stamp))        data_send = QueryKLineMsgReq(isSubKLine=isSubKLine, exchange=exchange, code=code, peroid_type=peroid_type,                                     type=query_type, direct=direct, start=start, end=end, vol=vol,                                     start_time_stamp=start_time_stamp)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.QUERY_KLINE_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)        final_rsp = {}        query_kline_rsp_list = []        sub_kline_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.QUERY_KLINE_RSP:                single_data = QueryKLineMsgRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                query_kline_rsp_list.append(json_single_data)            elif rev_data.type == QuoteMsgType.SUBSCRIBE_KLINE_RSP:                single_data = SubscribeKLineMsgRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                sub_kline_rsp_list.append(json_single_data)        final_rsp['query_kline_rsp_list'] = query_kline_rsp_list        final_rsp['sub_kline_rsp_list'] = sub_kline_rsp_list        self.logger.debug('QueryDaysKLineMinReqApi final_rsp:{}'.format(final_rsp))        return final_rsp    # app查询逐笔成交    async def QueryTradeTickMsgReqApi(self, isSubTrade, exchange, code, query_type, direct, start_time, end_time, vol,                                      start_time_stamp, recv_num=10):        '''message QueryTradeTickMsgReq{    bool                  isSubTrade  = 1;    // 是否订阅tadeTick,如果订阅，会返回SubscribeTradeTickRsp订阅回包    common.ExchangeType   exchange    = 2;    // 交易所    string                code        = 3;    // 合约代码    QueryKLineMsgType     type        = 4;    // 获取K线的方式(type=BY_DATE_TIME表示按start_time, end_time 返回数据; type=BY_VOL表示按start_time, direct, vol 返回数据)    QueryKLineDirectType  direct      = 5;    // 查询逐笔成交的方向    uint64                start_time  = 6;    // 开始时间(单位:毫秒)    uint64                end_time    = 7;    // 结束时间(单位:毫秒)    uint64                vol         = 8;    // 此字段表示查询逐笔成交的量}        '''        self.logger.debug(            'isSubTrade:{}, exchange:{}, code:{}, type:{}, direct:{}, start_time:{}, end_time:{}, vol:{}, start_time_stamp:{}'.format(                isSubTrade, exchange, code, query_type, direct, start_time, end_time, vol, start_time_stamp))        data_send = QueryTradeTickMsgReq(isSubTrade=isSubTrade, exchange=exchange, code=code, type=query_type,                                         direct=direct, start=start_time, end=end_time, vol=vol,                                         start_time_stamp=start_time_stamp)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.QUERY_TRADE_TICK_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)        final_rsp = {}        query_trade_tick_rsp_list = []        sub_trade_tick_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.QUERY_TRADE_TICK_RSP:                single_data = QueryTradeTickMsgRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                query_trade_tick_rsp_list.append(json_single_data)            elif rev_data.type == QuoteMsgType.SUBSCRIBE_TRADE_TICK_RSP:                single_data = SubscribeTradeTickRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                sub_trade_tick_rsp_list.append(json_single_data)        final_rsp['query_trade_tick_rsp_list'] = query_trade_tick_rsp_list        final_rsp['sub_trade_tick_rsp_list'] = sub_trade_tick_rsp_list        self.logger.debug('QueryTradeTickMsgReqApi final_rsp:{}'.format(final_rsp))        return final_rsp    #  查询品种交易状态    async def QueryTradeStatusMsgReqApi(self, exchange, productList, recv_num=2):        self.logger.debug('''exchange:{}, productList:{}'''.format(exchange, productList))        data_send = QueryTradeStatusMsgReq(exchange=exchange, productList=productList)        quote_msg = QuoteMsgCarrier(type=QuoteMsgType.QUERY_TRADE_STATUS_REQ, data=data_send.SerializeToString())        quote_msg = quote_msg.SerializeToString()        all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)        json_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.QUERY_TRADE_STATUS_RSP:                single_data = QueryTradeStatusMsgRsp()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)        self.logger.debug('QueryTradeStatusMsgReq json_rsp_list:{}'.format(json_rsp_list))        return json_rsp_list    # # 查询合约数据    # async def SyncInstrReqApi(self, sync_type, date_time=None, start_time_stamp=None, recv_num=10):    #     data_send = SyncInstrReq(type=sync_type, date_time=date_time, start_time_stamp=start_time_stamp)    #     quote_msg = QuoteMsgCarrier(type=QuoteMsgType.SYNC_INSTR_REQ, data=data_send.SerializeToString())    #     quote_msg = quote_msg.SerializeToString()    #     all_req = await self.client.send_and_recv(quote_msg, recv_num=recv_num)    #     json_rsp_list = []    #     for base_req in all_req:    #         rev_data = QuoteMsgCarrier()    #         rev_data.ParseFromString(base_req)    #         if rev_data.type == QuoteMsgType.SYNC_INSTR_RSP:    #             single_data = SyncInstrRsp()    #             single_data.ParseFromString(rev_data.data)    #             json_single_data = json_format.MessageToJson(single_data)    #             json_single_data = json.loads(json_single_data)    #             json_rsp_list.append(json_single_data)    #     self.logger.debug('SyncInstrReqApi json_rsp_list:{}'.format(json_rsp_list))    #     return json_rsp_list    # 主推静态、快照、盘口、逐笔、分时数据，此方法用于接收以用于服务耗时分析    async def AnalysisInfoToDB(self, recv_num=20):        all_req = await self.client.recv(recv_num)        json_rsp_list = []        for base_req in all_req:            rev_data = QuoteMsgCarrier()            rev_data.ParseFromString(base_req)            if rev_data.type == QuoteMsgType.PUSH_BASIC:                # 静态数据不入库分析                pass            elif rev_data.type == QuoteMsgType.PUSH_SNAPSHOT:                single_data = QuoteSnapshot()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)                exchange = self.common.searchDicKV(json_single_data, 'exchange')                product_code = self.common.searchDicKV(json_single_data, 'productCode')                instr_code = self.common.searchDicKV(json_single_data, 'instrCode')                collector_recv_time = int(int(self.common.searchDicKV(json_single_data, 'collectorRecvTime')) / pow(10, 6))                collector_send_time = int(int(self.common.searchDicKV(json_single_data, 'collectorSendTime')) / pow(10, 6))                publisher_recv_time = int(self.common.searchDicKV(json_single_data, 'publisherRecvTime'))                publisher_send_time = int(self.common.searchDicKV(json_single_data, 'publisherSendTime'))                req_source_time = int(int(self.common.searchDicKV(json_single_data, 'sourceUpdateTime')) / pow(10, 6))                collector2subscribe = publisher_recv_time - collector_recv_time                subscribe2out = publisher_send_time - publisher_recv_time                collect2out = collector_send_time - collector_recv_time                source2collector = collector_recv_time - req_source_time                inner_total_time = collector2subscribe + subscribe2out                self.sq.insert_time_analysis_info(exchange, product_code, instr_code, rev_data.type, collect2out,                                                  subscribe2out, collector2subscribe, source2collector, inner_total_time,                                                  json_single_data)            elif rev_data.type == QuoteMsgType.PUSH_ORDER_BOOK:                single_data = QuoteOrderBookData()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)                exchange = self.common.searchDicKV(json_single_data, 'exchange')                product_code = self.common.searchDicKV(json_single_data, 'productCode')                instr_code = self.common.searchDicKV(json_single_data, 'instrCode')                collector_recv_time = int(int(self.common.searchDicKV(json_single_data, 'collectorRecvTime')) / pow(10, 6))                collector_send_time = int(int(self.common.searchDicKV(json_single_data, 'collectorSendTime')) / pow(10, 6))                publisher_recv_time = int(self.common.searchDicKV(json_single_data, 'publisherRecvTime'))                publisher_send_time = int(self.common.searchDicKV(json_single_data, 'publisherSendTime'))                req_source_time = int(int(self.common.searchDicKV(json_single_data, 'sourceUpdateTime')) / pow(10, 6))                collector2subscribe = publisher_recv_time - collector_recv_time                subscribe2out = publisher_send_time - publisher_recv_time                collect2out = collector_send_time - collector_recv_time                source2collector = collector_recv_time - req_source_time                inner_total_time = collector2subscribe + subscribe2out                self.sq.insert_time_analysis_info(exchange, product_code, instr_code, rev_data.type, collect2out,                                                  subscribe2out, collector2subscribe, source2collector, inner_total_time,                                                  json_single_data)            elif rev_data.type == QuoteMsgType.PUSH_TRADE_DATA:                single_data = QuoteTradeData()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)                exchange = self.common.searchDicKV(json_single_data, 'exchange')                product_code = self.common.searchDicKV(json_single_data, 'productCode')                instr_code = self.common.searchDicKV(json_single_data, 'instrCode')                collector_recv_time = int(int(self.common.searchDicKV(json_single_data, 'collectorRecvTime')) / pow(10, 6))                collector_send_time = int(int(self.common.searchDicKV(json_single_data, 'collectorSendTime')) / pow(10, 6))                publisher_recv_time = int(self.common.searchDicKV(json_single_data, 'publisherRecvTime'))                publisher_send_time = int(self.common.searchDicKV(json_single_data, 'publisherSendTime'))                req_source_time = int(int(self.common.searchDicKV(json_single_data, 'sourceUpdateTime')) / pow(10, 6))                collector2subscribe = publisher_recv_time - collector_recv_time                subscribe2out = publisher_send_time - publisher_recv_time                collect2out = collector_send_time - collector_recv_time                source2collector = collector_recv_time - req_source_time                inner_total_time = collector2subscribe + subscribe2out                self.sq.insert_time_analysis_info(exchange, product_code, instr_code, rev_data.type, collect2out,                                                  subscribe2out, collector2subscribe, source2collector, inner_total_time,                                                  json_single_data)            elif rev_data.type == QuoteMsgType.PUSH_KLINE_MIN:                single_data = PushKLineMinData()                single_data.ParseFromString(rev_data.data)                json_single_data = json_format.MessageToJson(single_data)                json_single_data = json.loads(json_single_data)                json_rsp_list.append(json_single_data)                exchange = self.common.searchDicKV(json_single_data, 'exchange')                product_code = self.common.searchDicKV(json_single_data, 'productCode')                instr_code = self.common.searchDicKV(json_single_data, 'instrCode')                collector_recv_time = int(int(self.common.searchDicKV(json_single_data, 'collectorRecvTime')) / pow(10, 6))                collector_send_time = int(int(self.common.searchDicKV(json_single_data, 'collectorSendTime')) / pow(10, 6))                publisher_recv_time = int(self.common.searchDicKV(json_single_data, 'publisherRecvTime'))                publisher_send_time = int(self.common.searchDicKV(json_single_data, 'publisherSendTime'))                req_source_time = int(int(self.common.searchDicKV(json_single_data, 'sourceUpdateTime')) / pow(10, 6))                collector2subscribe = publisher_recv_time - collector_recv_time                subscribe2out = publisher_send_time - publisher_recv_time                collect2out = collector_send_time - collector_recv_time                source2collector = collector_recv_time - req_source_time                inner_total_time = collector2subscribe + subscribe2out                self.sq.insert_time_analysis_info(exchange, product_code, instr_code, rev_data.type, collect2out,                                                  subscribe2out, collector2subscribe, source2collector, inner_total_time,                                                  json_single_data)        self.logger.debug('AppQuoteAllApi json_rsp_list:{}'.format(json_rsp_list))        return json_rsp_list    async def only_recvMsg(self, recv_num=20):        self.logger.debug("*************先接收消息{}条，扔掉******************".format(recv_num))        all_req = await self.client.recv(recv_num=recv_num)if __name__ == '__main__':    # common = Common()    # new_loop = common.getNewLoop()    # api = SubscribeApi(ws_url, new_loop)    # asyncio.get_event_loop().run_until_complete(future=api.client.ws_connect())    # asyncio.get_event_loop().run_until_complete(future=api.HearbeatReqApi(123))    # asyncio.get_event_loop().run_until_complete(future=api.HearbeatReqApi(111))    # asyncio.get_event_loop().run_until_complete(future=api.client.recv(10))    # asyncio.get_event_loop().run_until_complete(future=api.client.disconnect())    pass